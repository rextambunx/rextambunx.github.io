# api/main.py
from fastapi import FastAPI, Request, HTTPException, Query, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, StreamingResponse
from pydantic import BaseModel
from jinja2 import Template
from docx import Document
from docxtpl import DocxTemplate
from typing import List
import json
import os
from datetime import datetime
from io import BytesIO
import re
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm

# üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á FastAPI app
app = FastAPI(title="THEPA Backend API", version="1.0.0")

# üî• CORS - ‡πÄ‡∏û‡∏¥‡πà‡∏° Frontend URL ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "https://rextambunx-github-io.vercel.app",  # Frontend URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        "https://*.vercel.app",
        "http://10.7.0.111:3000/"
        "*"  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing (production ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏ specific domains)
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# üìÅ File paths ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)  # ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ 1 level ‡∏à‡∏≤‡∏Å api/

DATA_DIR = os.path.join(PROJECT_ROOT, "data")
TEMPLATE_DIR = os.path.join(PROJECT_ROOT, "templates")
TEMP_DIR = "/tmp"  # Vercel temp directory

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)

# File paths
DATA_FILE = os.path.join(DATA_DIR, "lease_questions.json")
ANSWERS_FILE = os.path.join(DATA_DIR, "saved_answers.json")
GROUP_SECTION_FILE = os.path.join(DATA_DIR, "group_section.json")
TEMPLATE_FILE = os.path.join(TEMPLATE_DIR, "contract_template.docx")

# ======= PYDANTIC MODELS =======
class Group(BaseModel):
    groupName: str
    questionIds: List[str]

class AddQuestionRequest(BaseModel):
    groupName: str
    questionId: str

class AddQuestionsRequest(BaseModel):
    groupName: str
    newQuestionIds: List[str]

class DocRequest(BaseModel):
    template: str
    data: dict = {}
    answer_id: int = 0

class TemplateSaveRequest(BaseModel):
    name: str
    content: str

class SectionGroup(BaseModel):
    groupName: str
    questionIds: List[str]

# ======= UTILITY FUNCTIONS =======
def load_questions():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"title": "Legal Document Generator", "nodes": []}

def save_questions(data):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_answer_by_id(answer_id):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏° ID"""
    if not os.path.exists(ANSWERS_FILE):
        return {}
    with open(ANSWERS_FILE, encoding="utf-8") as f:
        data = json.load(f)
    if answer_id >= len(data):
        return {}
    return flatten_answer([data[answer_id]])

def flatten_answer(answer_list):
    """‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    combined = {}
    for ans in answer_list:
        if isinstance(ans, dict):
            for key, inner_dict in ans.items():
                if isinstance(inner_dict, dict):
                    combined.update(inner_dict)
                else:
                    combined[key] = inner_dict
    return combined

# ======= API ENDPOINTS =======

# üè• Health Check
@app.get("/")
def root():
    return {
        "message": "THEPA Backend API is running! üöÄ", 
        "status": "healthy",
        "version": "1.0.0",
        "endpoints": ["/questions", "/save_answers", "/generate", "/health"]
    }

@app.get("/health")
def health_check():
    return {
        "status": "healthy", 
        "timestamp": datetime.now().isoformat(),
        "data_files_exist": {
            "questions": os.path.exists(DATA_FILE),
            "answers": os.path.exists(ANSWERS_FILE),
            "groups": os.path.exists(GROUP_SECTION_FILE)
        }
    }

# üìã Questions API
@app.get("/questions")
def get_questions():
    """GET ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        return load_questions()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading questions: {str(e)}")

@app.post("/questions")
async def update_questions(request: Request):
    """POST ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    try:
        data = await request.json()
        save_questions(data)
        return {"message": "Questions updated successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating questions: {str(e)}")

@app.get("/api/lease_questions")
def get_lease_questions():
    """GET ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ id ‡∏Å‡∏±‡∏ö question)"""
    try:
        data = load_questions()
        nodes = data.get("nodes", [])
        questions = [{"id": node["id"], "question": node["question"]} for node in nodes]
        return questions
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading lease questions: {str(e)}")

# üíæ Answers API
@app.post("/save_answers")
async def save_answers(request: Request):
    """POST ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"""
    try:
        new_data = await request.json()

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        if os.path.exists(ANSWERS_FILE):
            with open(ANSWERS_FILE, "r", encoding="utf-8") as f:
                try:
                    all_data = json.load(f)
                    if not isinstance(all_data, list):
                        all_data = [all_data]
                except json.JSONDecodeError:
                    all_data = []
        else:
            all_data = []

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Answer
        answer_number = len(all_data) + 1
        wrapped_data = {f"Answer {answer_number}": new_data}
        all_data.append(wrapped_data)

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå
        with open(ANSWERS_FILE, "w", encoding="utf-8") as f:
            json.dump(all_data, f, ensure_ascii=False, indent=2)

        return {"message": f"Saved as Answer {answer_number}", "answer_id": answer_number}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error saving answers: {str(e)}")

@app.get("/get_all_answers")
def get_all_answers():
    """GET ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (merged format)"""
    try:
        if not os.path.exists(ANSWERS_FILE):
            return {}
        
        with open(ANSWERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            merged = {}
            for entry in data:
                if isinstance(entry, dict):
                    merged.update(entry)
            return merged
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading answers: {str(e)}")

@app.get("/answers/all")
def get_all_answers_raw():
    """GET ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (raw format)"""
    try:
        if not os.path.exists(ANSWERS_FILE):
            return []
        with open(ANSWERS_FILE, encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading raw answers: {str(e)}")

@app.get("/answers")
def get_answers(index: int = 0):
    """GET ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏° index"""
    try:
        if not os.path.exists(ANSWERS_FILE):
            return {"error": "No answers found"}
        
        with open(ANSWERS_FILE, encoding="utf-8") as f:
            data = json.load(f)
        if index < 0 or index >= len(data):
            return {"error": "Invalid index"}
        return flatten_answer([data[index]])
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading answer by index: {str(e)}")

# üìÑ Document Generation API
@app.post("/preview")
def preview(req: DocRequest):
    """POST ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"""
    try:
        data = req.data or load_answer_by_id(req.answer_id)
        rendered = Template(req.template).render(data)
        return {"rendered": rendered.replace("\n", "<br>")}
    except Exception as e:
        return {"error": f"Template error: {str(e)}"}

@app.post("/generate")
def generate_doc(req: DocRequest):
    """POST ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Word"""
    try:
        data = req.data or load_answer_by_id(req.answer_id)
        rendered = Template(req.template).render(data)
        
        doc = Document()
        for line in rendered.split('\n'):
            if line.strip():
                doc.add_paragraph(line)
        
        buf = BytesIO()
        doc.save(buf)
        buf.seek(0)
        
        return StreamingResponse(
            buf,
            media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            headers={"Content-Disposition": "attachment; filename=document.docx"}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Generation error: {str(e)}")

@app.post("/generate_pdf")
def generate_pdf(req: DocRequest):
    """POST ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF"""
    try:
        data = req.data or load_answer_by_id(req.answer_id)
        rendered = Template(req.template).render(data)
        
        # ‡πÅ‡∏õ‡∏•‡∏á **text** ‡πÄ‡∏õ‡πá‡∏ô <b>text</b>
        converted_text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", rendered)
        
        buf = BytesIO()
        doc = SimpleDocTemplate(buf, pagesize=A4)
        styles = getSampleStyleSheet()
        normal_style = styles["Normal"]
        
        story = []
        for line in converted_text.split("\n"):
            line = line.strip()
            if line:
                story.append(Paragraph(line, normal_style))
        
        doc.build(story)
        buf.seek(0)
        
        return StreamingResponse(
            buf,
            media_type="application/pdf",
            headers={"Content-Disposition": "attachment; filename=document.pdf"}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"PDF generation error: {str(e)}")

# üìÇ Group Management API
@app.post("/api/section_groups")
async def save_section_group(group: SectionGroup):
    """POST ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    try:
        if os.path.exists(GROUP_SECTION_FILE) and os.path.getsize(GROUP_SECTION_FILE) > 0:
            with open(GROUP_SECTION_FILE, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        data.append(group.dict())

        with open(GROUP_SECTION_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        return {"message": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "group": group}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error saving section group: {str(e)}")

@app.get("/api/group-section")
def get_group_section():
    """GET ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
    try:
        if not os.path.exists(GROUP_SECTION_FILE):
            return []
        with open(GROUP_SECTION_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading group sections: {str(e)}")

# üî• ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Export app ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
# Vercel ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô entry point